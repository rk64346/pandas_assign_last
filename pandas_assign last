{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0da93d9-a358-458a-a8cd-614deb5bd206",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "course_name = ['Data Science', 'Machine Learning', 'Big Data', 'Data Engineer']\n",
    "duration = [2,3,6,4]\n",
    "df = pd.DataFrame(data = {'course_name' : course_name, 'duration' : duration})"
   ]
  },
  {
   "cell_type": "raw",
   "id": "f3830220-0bd5-4d50-9bd0-17c022f7097f",
   "metadata": {},
   "source": [
    "Q1. Write a code to print the data present in the second row of the dataframe, df."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "54b25fdb-502d-40ac-83d2-282787445800",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "course_name    Machine Learning\n",
       "duration                      3\n",
       "Name: 1, dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "386c1184-64f2-4027-b385-7f1741d243cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "course_name    Machine Learning\n",
       "duration                      3\n",
       "Name: 1, dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b42f4dcb-20d2-4d60-b08c-87c106480803",
   "metadata": {},
   "source": [
    "Q2. What is the difference between the functions loc and iloc in pandas.DataFrame?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73d59be4-cc03-4f6e-99a5-795386e262b6",
   "metadata": {},
   "source": [
    "The main distinction between the two methods is:\n",
    "\n",
    "loc gets rows (and/or columns) with particular labels.\n",
    "iloc gets rows (and/or columns) at integer locations."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d239ab71-bc6c-47f3-a56f-041480869d08",
   "metadata": {},
   "source": [
    "Q3. Reindex the given dataframe using a variable, reindex = [3,0,1,2] and store it in the variable, new_df\n",
    "then find the output for both new_df.loc[2] and new_df.iloc[2]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e785b94e-e063-4bb3-b550-d7ad25b8cbd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df = df.reindex= [3,0,1,2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "edeabc53-6bdc-48f2-92aa-af645c769e39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "course_name    Big Data\n",
       "duration              6\n",
       "Name: 2, dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2d606128-1ba4-4c9f-8e3e-1d555788239a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "course_name    Big Data\n",
       "duration              6\n",
       "Name: 2, dtype: object"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7432d0bc-27d5-468e-9ad3-927eaa62f6a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "columns = ['column_1', 'column_2', 'column_3', 'column_4', 'column_5', 'column_6']\n",
    "indices = [1,2,3,4,5,6]\n",
    "#Creating a dataframe:\n",
    "df1 = pd.DataFrame(np.random.rand(6,6), columns = columns, index = indices)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "740ca698-1d0b-4614-a796-25128d7f4640",
   "metadata": {},
   "source": [
    "Q4. Write a code to find the following statistical measurements for the above dataframe df1:\n",
    "(i) mean of each and every column present in the dataframe.\n",
    "(ii) standard deviation of column, ‘column_2’"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ca1beded-37f9-4cc0-9bee-e1d02689053b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_1</th>\n",
       "      <th>column_2</th>\n",
       "      <th>column_3</th>\n",
       "      <th>column_4</th>\n",
       "      <th>column_5</th>\n",
       "      <th>column_6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.941777</td>\n",
       "      <td>0.925875</td>\n",
       "      <td>0.543982</td>\n",
       "      <td>0.577440</td>\n",
       "      <td>0.955124</td>\n",
       "      <td>0.636680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.420352</td>\n",
       "      <td>0.603097</td>\n",
       "      <td>0.327903</td>\n",
       "      <td>0.420855</td>\n",
       "      <td>0.404661</td>\n",
       "      <td>0.800814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.998703</td>\n",
       "      <td>0.548769</td>\n",
       "      <td>0.349873</td>\n",
       "      <td>0.570207</td>\n",
       "      <td>0.600628</td>\n",
       "      <td>0.306336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.137189</td>\n",
       "      <td>0.550276</td>\n",
       "      <td>0.629524</td>\n",
       "      <td>0.280474</td>\n",
       "      <td>0.034369</td>\n",
       "      <td>0.202616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.211244</td>\n",
       "      <td>0.760948</td>\n",
       "      <td>0.476008</td>\n",
       "      <td>0.513651</td>\n",
       "      <td>0.210898</td>\n",
       "      <td>0.789951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.102178</td>\n",
       "      <td>0.416688</td>\n",
       "      <td>0.152657</td>\n",
       "      <td>0.678611</td>\n",
       "      <td>0.299420</td>\n",
       "      <td>0.395590</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   column_1  column_2  column_3  column_4  column_5  column_6\n",
       "1  0.941777  0.925875  0.543982  0.577440  0.955124  0.636680\n",
       "2  0.420352  0.603097  0.327903  0.420855  0.404661  0.800814\n",
       "3  0.998703  0.548769  0.349873  0.570207  0.600628  0.306336\n",
       "4  0.137189  0.550276  0.629524  0.280474  0.034369  0.202616\n",
       "5  0.211244  0.760948  0.476008  0.513651  0.210898  0.789951\n",
       "6  0.102178  0.416688  0.152657  0.678611  0.299420  0.395590"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "850fcd44-886d-42f7-88c3-1bf6874451c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "column_1    0.468574\n",
       "column_2    0.634275\n",
       "column_3    0.413325\n",
       "column_4    0.506873\n",
       "column_5    0.417517\n",
       "column_6    0.521998\n",
       "dtype: float64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1c76a969-0a4f-4d8b-b652-56646247c247",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    0.196854\n",
       "2    0.174556\n",
       "3    0.246091\n",
       "4    0.235779\n",
       "5    0.252846\n",
       "6    0.208292\n",
       "dtype: float64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.std(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "763ff017-105f-426c-8e08-c884b5c86d1b",
   "metadata": {},
   "source": [
    "Q5. Replace the data present in the second row of column, ‘column_2’ by a string variable then find the\n",
    "mean of column, column_2.\n",
    "If you are getting errors in executing it then explain why.\n",
    "[Hint: To replace the data use df1.loc[] and equate this to string data of your choice.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "988dcff9-7d50-4e4c-90ed-d1235b055312",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.iloc[1] = \"rohit\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "7506efe8-2620-447e-b41e-764105dd524a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "column_1    rohit\n",
       "column_2    rohit\n",
       "column_3    rohit\n",
       "column_4    rohit\n",
       "column_5    rohit\n",
       "column_6    rohit\n",
       "Name: 2, dtype: object"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.iloc[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e681a052-8af2-4317-b58b-df85851b53c2",
   "metadata": {},
   "source": [
    "Q6. What do you understand about the windows function in pandas and list the types of windows\n",
    "functions?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "54b25287-e3e4-4a2f-adef-9ddc61c4596b",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'function' object has no attribute 'window'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[40], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mdf1\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrolling\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwindow\u001b[49m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'function' object has no attribute 'window'"
     ]
    }
   ],
   "source": [
    "df1.rolling.window"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dc19304-d6ef-4244-8658-f095af5215c9",
   "metadata": {},
   "source": [
    "Q7. Write a code to print only the current month and year at the time of answering this question.\n",
    "[Hint: Use pandas.datetime function]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "2a6ecc36-4fbd-495b-ad76-c6c8db44287a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "date = pd.date_range(start = '2023-1-17', end = '2023-1-30')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "df375fc5-ff97-4b2e-b2a1-50d41760f812",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2023-01-17', '2023-01-18', '2023-01-19', '2023-01-20',\n",
       "               '2023-01-21', '2023-01-22', '2023-01-23', '2023-01-24',\n",
       "               '2023-01-25', '2023-01-26', '2023-01-27', '2023-01-28',\n",
       "               '2023-01-29', '2023-01-30'],\n",
       "              dtype='datetime64[ns]', freq='D')"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "date"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f41f295-ec56-41eb-adec-e86a3d6ebea0",
   "metadata": {},
   "source": [
    "Q8. Write a Python program that takes in two dates as input (in the format YYYY-MM-DD) and\n",
    "calculates the difference between them in days, hours, and minutes using Pandas time delta. The\n",
    "program should prompt the user to enter the dates and display the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "7c740eef-33c6-4a58-b3ba-fbfa8e2dd313",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timedelta('1 days 05:45:00')"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Timedelta(days= 1,hours = 5 ,minutes = 45)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a474c271-7450-430d-9496-c0b79c34d64e",
   "metadata": {},
   "source": [
    "Q9. Write a Python program that reads a CSV file containing categorical data and converts a specified\n",
    "column to a categorical data type. The program should prompt the user to enter the file path, column\n",
    "name, and category order, and then display the sorted data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "d0b7f7d5-3f16-4564-b1e8-44f93ea0c6b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.read_csv(\"services.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "a1db4c3c-f1b2-4f15-af16-e412b4883790",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                            Walk in or apply by phone.\n",
       "1                    Apply by phone for an appointment.\n",
       "2           Phone for information (403-4300 Ext. 4322).\n",
       "3                                       Apply by phone.\n",
       "4                                Phone for information.\n",
       "5     Walk in or apply by phone for membership appli...\n",
       "6     Apply by phone or be referred by a doctor, soc...\n",
       "7                                       Apply by phone.\n",
       "8     Walk in. Proof of residency in California requ...\n",
       "9     Walk in. Proof of California residency to rece...\n",
       "10    Walk in. Proof of California residency require...\n",
       "11    Walk in or apply by phone, email or webpage re...\n",
       "12    Walk in. Proof of California residency require...\n",
       "13    Call for appointment. Referral from human serv...\n",
       "14            Walk in or through other agency referral.\n",
       "15    Walk in. Written application, identification r...\n",
       "16                                Call for information.\n",
       "17    Call for screening appointment. Medical visits...\n",
       "18       Call for screening appointment (650-347-3648).\n",
       "19                                             Walk in.\n",
       "20                      By phone during business hours.\n",
       "21                    Walk in or apply by phone or mail\n",
       "22                    Walk in or apply by phone or mail\n",
       "Name: application_process, dtype: object"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['application_process']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a45f623c-1090-40ef-a4c3-df3b024a8621",
   "metadata": {},
   "source": [
    "Q10. Write a Python program that reads a CSV file containing sales data for different products and\n",
    "visualizes the data using a stacked bar chart to show the sales of each product category over time. The\n",
    "program should prompt the user to enter the file path and display the chart."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "739984b2-57d7-450d-bc63-82c68998dfc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1['sales'] = 5500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "b75fa21e-94c3-46f6-af56-3489614ba5ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: xlabel='sales'>"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df1.plot.bar('sales')"
   ]
  },
  {
   "cell_type": "raw",
   "id": "8efb9ef6-bf87-4dbf-b9b5-c2586281fe70",
   "metadata": {},
   "source": [
    "Q11. You are given a CSV file containing student data that includes the student ID and their test score. Write\n",
    "a Python program that reads the CSV file, calculates the mean, median, and mode of the test scores, and\n",
    "displays the results in a table.\n",
    "The program should do the followingM\n",
    "I Prompt the user to enter the file path of the CSV file containing the student dataR\n",
    "I Read the CSV file into a Pandas DataFrameR\n",
    "I Calculate the mean, median, and mode of the test scores using Pandas toolsR\n",
    "I Display the mean, median, and mode in a table.\n",
    "Assume the CSV file contains the following columnsM\n",
    "I Student ID: The ID of the studentR\n",
    "I Test Score: The score of the student's test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "c36bd99d-ee6b-4757-aa89-07f35371b899",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Student ID  Test Score\n",
      "0           1          85\n",
      "1           2          90\n",
      "2           3          80\n",
      "3           4          75\n",
      "4           5          85\n",
      "5           6          82\n",
      "6           7          78\n",
      "7           8          85\n",
      "8           9          90\n",
      "9          10          85\n"
     ]
    }
   ],
   "source": [
    "data = [\n",
    "    [1, 85],\n",
    "    [2, 90],\n",
    "    [3, 80],\n",
    "    [4, 75],\n",
    "    [5, 85],\n",
    "    [6, 82],\n",
    "    [7, 78],\n",
    "    [8, 85],\n",
    "    [9, 90],\n",
    "    [10, 85]\n",
    "]\n",
    "\n",
    "# Create a DataFrame\n",
    "df = pd.DataFrame(data, columns=['Student ID', 'Test Score'])\n",
    "\n",
    "# Display the DataFrame\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "4350b249-647c-4f2a-b953-a235baf15568",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame._add_numeric_operations.<locals>.mean of    Student ID  Test Score\n",
       "0           1          85\n",
       "1           2          90\n",
       "2           3          80\n",
       "3           4          75\n",
       "4           5          85\n",
       "5           6          82\n",
       "6           7          78\n",
       "7           8          85\n",
       "8           9          90\n",
       "9          10          85>"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "eecbae89-3c81-461d-9760-750e222b0c3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame._add_numeric_operations.<locals>.median of    Student ID  Test Score\n",
       "0           1          85\n",
       "1           2          90\n",
       "2           3          80\n",
       "3           4          75\n",
       "4           5          85\n",
       "5           6          82\n",
       "6           7          78\n",
       "7           8          85\n",
       "8           9          90\n",
       "9          10          85>"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.median"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "1ee576a6-0889-416e-8d4c-594ed81b14a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.mode of    Student ID  Test Score\n",
       "0           1          85\n",
       "1           2          90\n",
       "2           3          80\n",
       "3           4          75\n",
       "4           5          85\n",
       "5           6          82\n",
       "6           7          78\n",
       "7           8          85\n",
       "8           9          90\n",
       "9          10          85>"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.mode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6945057-51c7-412b-884f-257b4cd5772c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
